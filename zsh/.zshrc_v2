#fzfを読み込む
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_COMMAND='rg --files --hidden --glob "!.git"'
export FZF_DEFAULT_OPTS="--height 40% --reverse --border"

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi


### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk
source ~/powerlevel10k/powerlevel10k.zsh-theme

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

## コマンド補完
zinit ice wait'0'; zinit light zsh-users/zsh-completions
autoload -Uz compinit && compinit

## 補完で小文字でも大文字にマッチさせる
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

## 補完候補を一覧表示したとき、Tabや矢印で選択できるようにする
zstyle ':completion:*:default' menu select=1

## シンタックスハイライト
zinit light zsh-users/zsh-syntax-highlighting

## 履歴補完
zinit light zsh-users/zsh-autosuggestions

ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=244"

## 履歴保存管理
export HISTFILE=$HOME/.zsh_history
export HISTSIZE=100000        # メモリ上の履歴リストに保存されるイベントの最大数
export SAVEHIST=1000000        # 履歴ファイルに保存されるイベントの最大数

setopt hist_expire_dups_first # 履歴を切り詰める際に、重複する最も古いイベントから消す
setopt hist_ignore_all_dups   # 履歴が重複した場合に古い履歴を削除する
setopt hist_ignore_dups       # 前回のイベントと重複する場合、履歴に保存しない
setopt hist_save_no_dups      # 履歴ファイルに書き出す際、新しいコマンドと重複する古いコマンドは切り捨てる
setopt share_history          # 全てのセッションで履歴を共有する


## Git補完
fpath=(
  ${HOME}/.zsh/completions
  ${fpath}
)
autoload -Uz compinit
compinit

#-------------alias--------------------
alias ls="ls -GCF"
alias ll="ls -Gl"
alias suvim="sudo vim -u ~/.vimrc"
alias ssh="ssh -A"
alias tmux="tmux -2"


#------------ fzf ----------------------
function fsnip() {
  print -z $(cat ~/.zsh_snips | fzf)
}

# コマンド履歴
# CTRL-R - Paste the selected command from history into the command line
function fzf-history-widget() {
    local tac=${commands[tac]:-"tail -r"}
    BUFFER=$( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) |
        sed 's/ *[0-9]*\** *//' |
        eval $tac | awk '!a[$0]++' |
        fzf --exact --prompt="History> " +s)
    CURSOR=$#BUFFER
}
zle     -N   fzf-history-widget
bindkey '^R' fzf-history-widget

# ヒストリを利用したディレクトリ移動
function hd () {
    local selected_dir=$(cdr -l |
        sed 's/^[^ ][^ ]*  *//' |
        sed 's/\\ / /g' |
        sed 's/\\(/(/g' |
        sed 's/\\)/)/g' |
        fzf +s --prompt="cd> ")
    selected_dir=${selected_dir/#\~/$HOME}
    if [ -n "$selected_dir" ]; then
        cd "$selected_dir"
    fi
}

# ブランチの切り替え
function fbr() {
    local branches branch
    branches=$(git branch | grep -v "^* " | sed "s/^  //") &&
        branch=$(echo "$branches" | fzf +m --prompt="Branch> " --preview="git log --color=always {}") &&
        git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# タグやリモートブランチも含めてチェックアウトする
function fco() {
    local tags branches target
    tags=$(
    git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
    branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
    target=$(
    (echo "$branches"; echo "$tags") |
    fzf --prompt="Checkout> " --no-hscroll --ansi +m -d "\t" -n 2) || return
    git checkout $(echo "$target" | awk '{print $2}')
}

# 履歴からsshする
function fssh() {
  local host="$(cat ~/.ssh/known_hosts | awk '{split($1, s, ","); print s[1]}' | fzf)"
  if [ -n "$host" ] ; then
    print -z ssh "$host"
  fi
}

# fzfを利用したコマンドを表示する
function fzf_commands() {
    echo hd   履歴から移動
    echo fbr  ブランチの切り替え
    echo fco  タグ・リモートブランチを含めてチェックアウト
    echo fssh 履歴からsshする
}
